### Starting build.
# Target: interpreteTeste.ml.depends, tags: { extension:ml, file:interpreteTeste.ml, ocaml, ocamldep, package(menhirLib), quiet }
ocamlfind ocamldep -package menhirLib -modules interpreteTeste.ml > interpreteTeste.ml.depends
# Target: ast.ml.depends, tags: { extension:ml, file:ast.ml, ocaml, ocamldep, package(menhirLib), quiet }
ocamlfind ocamldep -package menhirLib -modules ast.ml > ast.ml.depends
# Target: errosint.ml.depends, tags: { extension:ml, file:errosint.ml, ocaml, ocamldep, package(menhirLib), quiet }
ocamlfind ocamldep -package menhirLib -modules errosint.ml > errosint.ml.depends
# Target: interprete.mli.depends, tags: { extension:mli, file:interprete.mli, ocaml, ocamldep, package(menhirLib), quiet }
ocamlfind ocamldep -package menhirLib -modules interprete.mli > interprete.mli.depends
# Target: ast.cmo, tags: { byte, compile, extension:cmo, extension:ml, file:ast.cmo, file:ast.ml, implem, ocaml, package(menhirLib), quiet }
ocamlfind ocamlc -c -package menhirLib -o ast.cmo ast.ml
# Target: tast.ml.depends, tags: { extension:ml, file:tast.ml, ocaml, ocamldep, package(menhirLib), quiet }
ocamlfind ocamldep -package menhirLib -modules tast.ml > tast.ml.depends
# Target: tast.cmo, tags: { byte, compile, extension:cmo, extension:ml, file:tast.cmo, file:tast.ml, implem, ocaml, package(menhirLib), quiet }
ocamlfind ocamlc -c -package menhirLib -o tast.cmo tast.ml
# Target: lexico.mll, tags: { extension:mll, file:lexico.mll, lexer, ocaml, ocamllex, package(menhirLib), quiet }
/usr/bin/ocamllex -q lexico.mll
# Target: lexico.ml.depends, tags: { extension:ml, file:lexico.ml, ocaml, ocamldep, package(menhirLib), quiet }
ocamlfind ocamldep -package menhirLib -modules lexico.ml > lexico.ml.depends # cached
# Target: sintatico.mly.depends, tags: { extension:mly, file:sintatico.mly, infer, menhir_ocamldep, ocaml, ocamldep, package(menhirLib), quiet }
menhir --table --raw-depend --ocamldep 'ocamlfind ocamldep -modules' sintatico.mly > sintatico.mly.depends
+ menhir --table --raw-depend --ocamldep 'ocamlfind ocamldep -modules' sintatico.mly > sintatico.mly.depends
File "sintatico.mly", line 38, characters 25-29:
Warning: the token CASE is unused.
File "sintatico.mly", line 39, characters 25-27:
Warning: the token OF is unused.
File "sintatico.mly", line 41, characters 25-34:
Warning: the token PROCEDURE is unused.
File "sintatico.mly", line 165, characters 0-8:
Warning: symbol variavel is unreachable from any of the start symbol(s).
# Target: sast.ml.depends, tags: { extension:ml, file:sast.ml, ocaml, ocamldep, package(menhirLib), quiet }
ocamlfind ocamldep -package menhirLib -modules sast.ml > sast.ml.depends
# Target: sast.cmo, tags: { byte, compile, extension:cmo, extension:ml, file:sast.cmo, file:sast.ml, implem, ocaml, package(menhirLib), quiet }
ocamlfind ocamlc -c -package menhirLib -o sast.cmo sast.ml
# Target: sintatico.mly, tags: { byte, compile, extension:ml, extension:mly, file:sintatico.ml, file:sintatico.mly, infer, menhir, ocaml, package(menhirLib), parser, quiet }
menhir --table --ocamlc 'ocamlfind ocamlc -package menhirLib' --infer sintatico.mly
+ menhir --table --ocamlc 'ocamlfind ocamlc -package menhirLib' --infer sintatico.mly
File "sintatico.mly", line 38, characters 25-29:
Warning: the token CASE is unused.
File "sintatico.mly", line 39, characters 25-27:
Warning: the token OF is unused.
File "sintatico.mly", line 41, characters 25-34:
Warning: the token PROCEDURE is unused.
File "sintatico.mly", line 165, characters 0-8:
Warning: symbol variavel is unreachable from any of the start symbol(s).
# Target: sintatico.mli.depends, tags: { extension:mli, file:sintatico.mli, ocaml, ocamldep, package(menhirLib), quiet }
ocamlfind ocamldep -package menhirLib -modules sintatico.mli > sintatico.mli.depends # cached
# Target: sintatico.cmi, tags: { byte, compile, extension:mli, file:sintatico.mli, interf, ocaml, package(menhirLib), quiet }
ocamlfind ocamlc -c -package menhirLib -o sintatico.cmi sintatico.mli # cached
# Target: lexico.cmo, tags: { byte, compile, extension:cmo, extension:ml, file:lexico.cmo, file:lexico.ml, implem, ocaml, package(menhirLib), quiet }
ocamlfind ocamlc -c -package menhirLib -o lexico.cmo lexico.ml # cached
# Target: semantico.mli.depends, tags: { extension:mli, file:semantico.mli, ocaml, ocamldep, package(menhirLib), quiet }
ocamlfind ocamldep -package menhirLib -modules semantico.mli > semantico.mli.depends
# Target: ambiente.mli.depends, tags: { extension:mli, file:ambiente.mli, ocaml, ocamldep, package(menhirLib), quiet }
ocamlfind ocamldep -package menhirLib -modules ambiente.mli > ambiente.mli.depends
# Target: ambiente.cmi, tags: { byte, compile, extension:mli, file:ambiente.mli, interf, ocaml, package(menhirLib), quiet }
ocamlfind ocamlc -c -package menhirLib -o ambiente.cmi ambiente.mli
# Target: errosint.cmo, tags: { byte, compile, extension:cmo, extension:ml, file:errosint.cmo, file:errosint.ml, implem, ocaml, package(menhirLib), quiet }
ocamlfind ocamlc -c -package menhirLib -o errosint.cmo errosint.ml
# Target: interprete.cmi, tags: { byte, compile, extension:mli, file:interprete.mli, interf, ocaml, package(menhirLib), quiet }
ocamlfind ocamlc -c -package menhirLib -o interprete.cmi interprete.mli
# Target: semantico.cmi, tags: { byte, compile, extension:mli, file:semantico.mli, interf, ocaml, package(menhirLib), quiet }
ocamlfind ocamlc -c -package menhirLib -o semantico.cmi semantico.mli
# Target: interpreteTeste.cmo, tags: { byte, compile, extension:cmo, extension:ml, file:interpreteTeste.cmo, file:interpreteTeste.ml, implem, ocaml, package(menhirLib), quiet }
ocamlfind ocamlc -c -package menhirLib -o interpreteTeste.cmo interpreteTeste.ml
# Target: interprete.ml.depends, tags: { extension:ml, file:interprete.ml, ocaml, ocamldep, package(menhirLib), quiet }
ocamlfind ocamldep -package menhirLib -modules interprete.ml > interprete.ml.depends
# Target: ambInterp.mli.depends, tags: { extension:mli, file:ambInterp.mli, ocaml, ocamldep, package(menhirLib), quiet }
ocamlfind ocamldep -package menhirLib -modules ambInterp.mli > ambInterp.mli.depends
# Target: ambInterp.cmi, tags: { byte, compile, extension:mli, file:ambInterp.mli, interf, ocaml, package(menhirLib), quiet }
ocamlfind ocamlc -c -package menhirLib -o ambInterp.cmi ambInterp.mli
# Target: semantico.ml.depends, tags: { extension:ml, file:semantico.ml, ocaml, ocamldep, package(menhirLib), quiet }
ocamlfind ocamldep -package menhirLib -modules semantico.ml > semantico.ml.depends
# Target: sintatico.ml.depends, tags: { extension:ml, file:sintatico.ml, ocaml, ocamldep, package(menhirLib), quiet }
ocamlfind ocamldep -package menhirLib -modules sintatico.ml > sintatico.ml.depends # cached
# Target: sintatico.cmo, tags: { byte, compile, extension:cmo, extension:ml, file:sintatico.cmo, file:sintatico.ml, implem, ocaml, package(menhirLib), quiet }
ocamlfind ocamlc -c -package menhirLib -o sintatico.cmo sintatico.ml # cached
# Target: interprete.cmo, tags: { byte, compile, extension:cmo, extension:ml, file:interprete.cmo, file:interprete.ml, implem, ocaml, package(menhirLib), quiet }
ocamlfind ocamlc -c -package menhirLib -o interprete.cmo interprete.ml
+ ocamlfind ocamlc -c -package menhirLib -o interprete.cmo interprete.ml
File "interprete.ml", line 37, characters 2-175:
Warning 8: this pattern-matching is not exhaustive.
Here is an example of a value that is not matched:
Mod
# Target: semantico.cmo, tags: { byte, compile, extension:cmo, extension:ml, file:semantico.cmo, file:semantico.ml, implem, ocaml, package(menhirLib), quiet }
ocamlfind ocamlc -c -package menhirLib -o semantico.cmo semantico.ml
+ ocamlfind ocamlc -c -package menhirLib -o semantico.cmo semantico.ml
File "semantico.ml", line 7, characters 2-219:
Warning 8: this pattern-matching is not exhaustive.
Here is an example of a value that is not matched:
ExpVoid
File "semantico.ml", line 62, characters 2-4228:
Warning 8: this pattern-matching is not exhaustive.
Here is an example of a value that is not matched:
ExpVoid
# Target: ambInterp.ml.depends, tags: { extension:ml, file:ambInterp.ml, ocaml, ocamldep, package(menhirLib), quiet }
ocamlfind ocamldep -package menhirLib -modules ambInterp.ml > ambInterp.ml.depends
# Target: tabsimb.mli.depends, tags: { extension:mli, file:tabsimb.mli, ocaml, ocamldep, package(menhirLib), quiet }
ocamlfind ocamldep -package menhirLib -modules tabsimb.mli > tabsimb.mli.depends
# Target: tabsimb.cmi, tags: { byte, compile, extension:mli, file:tabsimb.mli, interf, ocaml, package(menhirLib), quiet }
ocamlfind ocamlc -c -package menhirLib -o tabsimb.cmi tabsimb.mli
# Target: ambInterp.cmo, tags: { byte, compile, extension:cmo, extension:ml, file:ambInterp.cmo, file:ambInterp.ml, implem, ocaml, package(menhirLib), quiet }
ocamlfind ocamlc -c -package menhirLib -o ambInterp.cmo ambInterp.ml
# Target: tabsimb.ml.depends, tags: { extension:ml, file:tabsimb.ml, ocaml, ocamldep, package(menhirLib), quiet }
ocamlfind ocamldep -package menhirLib -modules tabsimb.ml > tabsimb.ml.depends
# Target: tabsimb.cmo, tags: { byte, compile, extension:cmo, extension:ml, file:tabsimb.cmo, file:tabsimb.ml, implem, ocaml, package(menhirLib), quiet }
ocamlfind ocamlc -c -package menhirLib -o tabsimb.cmo tabsimb.ml
# Target: ambiente.ml.depends, tags: { extension:ml, file:ambiente.ml, ocaml, ocamldep, package(menhirLib), quiet }
ocamlfind ocamldep -package menhirLib -modules ambiente.ml > ambiente.ml.depends
# Target: ambiente.cmo, tags: { byte, compile, extension:cmo, extension:ml, file:ambiente.cmo, file:ambiente.ml, implem, ocaml, package(menhirLib), quiet }
ocamlfind ocamlc -c -package menhirLib -o ambiente.cmo ambiente.ml
# Target: interpreteTeste.byte, tags: { byte, dont_link_with, extension:byte, file:interpreteTeste.byte, link, ocaml, package(menhirLib), program, quiet }
ocamlfind ocamlc -linkpkg -package menhirLib ast.cmo errosint.cmo tabsimb.cmo tast.cmo ambInterp.cmo sast.cmo interprete.cmo sintatico.cmo lexico.cmo ambiente.cmo semantico.cmo interpreteTeste.cmo -o interpreteTeste.byte # cached
# Compilation successful.
